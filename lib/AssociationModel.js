var _                       = require('lodash'),
	util                    = require('util'),
	Express                 = require('express'),
	Helpers                 = require('./helpers/Helpers'),
	DefaultScaffolding      = require('./DefaultScaffolding'),
	AssociationScaffolding   = require('./AssociationScaffolding');

module.exports = (function() {

	/**
	 * Sleep Object that holds a sequelize model's RESTful bindings.
	 *
	 * Can also contain this model's associations.
	 *
	 * @param {Sleep} API that this belongs to.
	 * @param modelDefinition
	 * @constructor
	 */
	var AssociationModel = function(api, parent, modelDefinition, remainingDepth) {
		this.parentAPI = api;
		this.RESTParent = parent;

		this.model = modelDefinition.model;
		this.modelRouter = Express.Router();

		this.path = this.model.tableName.toLowerCase();
		this.primaryKey = Helpers.getPrimaryKey(this.model);
		this.associatedBy = Helpers.getAssociatedBy(this.RESTParent, this.model);

		this.routes = {
			param: [
				AssociationScaffolding.primaryKeyParameter(this)
			],
			get: [
				AssociationScaffolding.getRootById(this),
				AssociationScaffolding.getRoot(this)
			]
		};

		/**
		 * Array of valid columns in the class minus the primary key
		 * However the primary key is only 'not valid' to be set if it is
		 * marked as auto-generated.
		 */
		this.validColumns = _.keys(this.model.rawAttributes);

		if(this.model.rawAttributes[this.primaryKey]._autoGenerated)
			this.validColumns.splice(this.validColumns.indexOf(this.primaryKey), 1);
	};


	AssociationModel.prototype.bindModel = function() {
		var tp = this;
		var mr = this.modelRouter;
		var pmr = this.RESTParent.modelRouter;
		var model = this.model;

		_.forEach(tp.routes, function(value, key) {
			_.forEach(tp.routes[key], function(scaffold) {
				var rt = scaffold;

				if(_.isFunction(scaffold))
					rt = scaffold(tp);

				if(rt.hasOwnProperty('auth'))
					mr[key](rt.path, rt.auth, rt.callback);
				else
					mr[key](rt.path, rt.callback);
			});
		});

		var assocRoute = util.format('/:%s/%s', Helpers.getIdentifier(this.RESTParent), this.path);

		console.log('Association Route: %s', assocRoute);

		pmr.use(assocRoute, this.modelRouter);
	};

	return AssociationModel;
})();