var express     = require('express'),
	_           = require('underscore'),
	util        = require('util'),
	helper      = require('./model_helper'),
	defaults    = require('./model_defaults');

/**
 *
 **/

var removeUndefined = function(value) {
	return value != undefined;
}

module.exports = (function() {
	var AdvModel = function(options) {
		if(!options.hasOwnProperty('model'))
			throw new Error("Model not defined in options.");

		this.model = options.model;
		this.path = this.model.tableName.toLowerCase();
		this.modelRouter = express.Router();
		this.primaryKey = helper.getPrimaryKey(this.model);


		/**
		 * Array of valid columns in the class minus the primary key
		 * However the primary key is only 'not valid' to be set if it is
		 * marked as auto-generated.
		 */
		this.validColumns = _.keys(this.model.rawAttributes);

		if(this.model.rawAttributes[this.primaryKey]._autoGenerated)
			this.validColumns.splice(this.validColumns.indexOf(this.primaryKey), 1);

		this.options = _.extend({
			// Should we automatically generate the association sub-routes?
			walk_associations: true,

			// How deep into the association tree should we walk?
			walk_depth: 1,

			// Should we allow the base GET /<MODEL_PATH> to retrieve all of something?
			allow_root: true,

			// Enables or disables the default routes for this model.
			// Disabling a route here makes it inaccessible even if you
			// have it accessible through an authentication middleware.
			defaults: {
				get: true,
				post: true,
				put: true,
				patch: true,
				delete: true
			}
		}, options.options);

		/**
		 * Extra route options, to add convenience functions to a
		 * route for commonly used shorthands.
		 *
		 * However this also contains the default routes as well.
		 */

		this.extra = {
			params: _.filter(_.flatten(_.zip(
				[
					new defaults.primaryKeyParameter(this)
				], options.extra && options.extra.params || []), false), removeUndefined),
			get: _.filter(_.flatten(_.zip(
				[
					new defaults.getByPrimaryKey(this)
				], options.extra && options.extra.get || []), false), removeUndefined),
			post: _.filter(_.flatten(_.zip(
				[
					new defaults.createNew(this)
				], options.extra && options.extra.post || []), false), removeUndefined),
			put: _.filter(_.flatten(_.zip(
				[
					new defaults.updateRow(this)
				], options.extra && options.extra.put || []), false), removeUndefined),
			patch: _.filter(_.flatten(_.zip(
				[
					// For the time being this does the exact same thing as the put,
					// as I honestly don't grasp the difference between these two.
					new defaults.updateRow(this)
				], options.extra && options.extra.patch || []), false), removeUndefined),
			delete: _.filter(_.flatten(_.zip(
				[
					new defaults.deleteWhere(this),
					new defaults.deleteByPrimaryKey(this)
				], options.extra && options.extra.delete || []), false), removeUndefined)
		};

		this.filter = _.extend({
			// If this is filled out, don't allow these parameters to be used.
			blacklist: [],

			// If this is filled out, ONLY allow these parameters to be used.
			whitelist: []
		}, options.filter);
	}

	AdvModel.prototype.bindModel = function(rt) {
		var mr = this.modelRouter;
		var model = this.model;

		_.forEach(this.extra.get, function(route) {
			mr.get(route.path, route.callback);
		});

		_.forEach(this.extra.post, function(route) {
			mr.post(route.path, route.callback);
		});

		_.forEach(this.extra.put, function(route) {
			mr.put(route.path, route.callback);
		});

		_.forEach(this.extra.patch, function(route) {
			mr.patch(route.path, route.callback);
		});

		_.forEach(this.extra.delete, function(route) {
			mr.delete(route.path, route.callback);
		});

		_.forEach(this.extra.params, function(pdef) {
			mr.param(pdef.identifier, pdef.callback);
		});


		if(this.options.allow_root)
		{
			mr.get('/', function(req, res) {
				model.findAll(helper.buildQuerySearchParameters(model, req)).success(function(objs) {
					res.status(200).json(objs);
				}).error(function(err) {
					res.status(404).json(err);
				})
			});
		}


		rt.use('/' + this.path, this.modelRouter);
	}


	return AdvModel;
})();